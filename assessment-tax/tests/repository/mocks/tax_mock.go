// Code generated by MockGen. DO NOT EDIT.
// Source: ../../repository/tax.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/LGROW101/assessment-tax/model"
	gomock "github.com/golang/mock/gomock"
)

// MockTaxRepository is a mock of TaxRepository interface.
type MockTaxRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaxRepositoryMockRecorder
}

// MockTaxRepositoryMockRecorder is the mock recorder for MockTaxRepository.
type MockTaxRepositoryMockRecorder struct {
	mock *MockTaxRepository
}

// NewMockTaxRepository creates a new mock instance.
func NewMockTaxRepository(ctrl *gomock.Controller) *MockTaxRepository {
	mock := &MockTaxRepository{ctrl: ctrl}
	mock.recorder = &MockTaxRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaxRepository) EXPECT() *MockTaxRepositoryMockRecorder {
	return m.recorder
}

// GetAllCalculations mocks base method.
func (m *MockTaxRepository) GetAllCalculations() ([]*model.TaxCalculation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCalculations")
	ret0, _ := ret[0].([]*model.TaxCalculation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCalculations indicates an expected call of GetAllCalculations.
func (mr *MockTaxRepositoryMockRecorder) GetAllCalculations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCalculations", reflect.TypeOf((*MockTaxRepository)(nil).GetAllCalculations))
}

// Save mocks base method.
func (m *MockTaxRepository) Save(tax *model.TaxCalculation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", tax)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockTaxRepositoryMockRecorder) Save(tax interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTaxRepository)(nil).Save), tax)
}
