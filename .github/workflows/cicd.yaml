name: CI and CD for Dev

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.22.1
      - name: Build
        run: go build -v ./...
        working-directory: assessment-tax
      - name: Test
        run: |
          go test -v ./... -coverprofile=coverage.out
          go tool cover -func=coverage.out
        working-directory: assessment-tax

  sonarqube:
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Install SonarQube scanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
          unzip sonar-scanner-cli-4.6.2.2472-linux.zip
          echo "$PWD/sonar-scanner-4.6.2.2472-linux/bin" >> $GITHUB_PATH

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          cd assessment-tax
          go build ./...
          go test ./... -coverprofile=coverage.out
          sonar-scanner -Dsonar.projectKey=assessment-tax -Dsonar.go.coverage.reportPaths=coverage.out

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test, sonarqube]

    steps:
      - uses: actions/checkout@v3

      - name: Build Docker images
        run: |
          docker build -t locker01/assessment-tax-api:v1 -f assessment-tax/Dockerfile ./assessment-tax
          docker build -t locker01/assessment-tax-client:v1 -f client/Dockerfile ./client

      - name: Push Docker images to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker push locker01/assessment-tax-api:v1
          docker push locker01/assessment-tax-client:v1

      - name: Deploy to Kubernetes
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG" | base64 --decode > kubeconfig
          kubectl --kubeconfig=kubeconfig apply -f k8s
          kubectl --kubeconfig=kubeconfig set image deployment/api-deployment api=locker01/assessment-tax-api:v1
          kubectl --kubeconfig=kubeconfig set image deployment/frontend-deployment frontend=locker01/assessment-tax-client:v1

      - name: Sync with ArgoCD
        run: |
          argocd login "${{ secrets.ARGOCD_SERVER }}" --username "${{ secrets.ARGOCD_USERNAME }}" --password "${{ secrets.ARGOCD_PASSWORD }}" --insecure
          argocd app sync myapp
