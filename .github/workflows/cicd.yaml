name: CI and CD for Assessment Tax Project

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.22.1
      - name: Build
        run: go build -v ./...
        working-directory: assessment-tax
      - name: Test
        run: |
          go test -v ./... -coverprofile=coverage.out
          go tool cover -func=coverage.out
        working-directory: assessment-tax

  sonarqube:
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Install SonarQube scanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
          unzip sonar-scanner-cli-4.6.2.2472-linux.zip
          echo "$PWD/sonar-scanner-4.6.2.2472-linux/bin" >> $GITHUB_PATH

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          cd assessment-tax
          go build ./...
          go test ./... -coverprofile=coverage.out
          sonar-scanner -Dsonar.projectKey=basic-Kubernetes -Dsonar.go.coverage.reportPaths=coverage.out

      - name: Generate SonarQube report
        run: |
          cd assessment-tax
          curl -s -u "${{ secrets.SONAR_TOKEN }}:" "${{ secrets.SONAR_HOST_URL }}/api/measures/component?component=basic-Kubernetes&metricKeys=coverage&format=json" > sonarqube-report.json

  build-and-push-docker-image:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test, sonarqube]

    steps:
      - uses: actions/checkout@v4

      - name: Setup SHA
        run: echo "GITHUB_SHA=${GITHUB_SHA}" >> $GITHUB_ENV

      - name: Login ghcr.io
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push api Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: ./assessment-tax
          file: ./assessment-tax/Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ghcr.io/lgrow101/basic-kubernetes-api:${{ env.GITHUB_SHA }}

      - name: Build and push client Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: ./client
          file: ./client/Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ghcr.io/lgrow101/basic-kubernetes-client:${{ env.GITHUB_SHA }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push-docker-image

    steps:
      - name: Deploy to Kubernetes
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG" | base64 --decode > kubeconfig
          kubectl --kubeconfig=kubeconfig create configmap coverage-report --from-file=assessment-tax/sonarqube-report.json
          kubectl --kubeconfig=kubeconfig apply -f k8s
          kubectl --kubeconfig=kubeconfig apply -f k8s/coverage-report.yaml
          kubectl --kubeconfig=kubeconfig set image deployment/api-deployment api=ghcr.io/lgrow101/basic-kubernetes-api:${{ env.GITHUB_SHA }}
          kubectl --kubeconfig=kubeconfig set image deployment/client-deployment client=ghcr.io/lgrow101/basic-kubernetes-client:${{ env.GITHUB_SHA }}

      - name: Sync with ArgoCD
        run: |
          argocd login "${{ secrets.ARGOCD_SERVER }}" --username "${{ secrets.ARGOCD_USERNAME }}" --password "${{ secrets.ARGOCD_PASSWORD }}" --insecure
          argocd app sync basic-Kubernetes
